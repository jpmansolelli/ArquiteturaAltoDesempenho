
C:/Users/joaop/OneDrive/Documentos/ARQ3/EntregaJogo/JogoFinal/video.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 d8 0e 00 00 dc 0e 00 00 e0 0e 00 00     @...............
  30:	e4 0e 00 00 d4 0e 00 00 e8 0e 00 00 ec 0e 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x90>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x8c>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x94>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x5c>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x5c>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_region_zero_size_ram+0x44>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x7c>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x6c>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_region_zero_size_ram+0x1c>
  d4:	eb000365 	bl	e70 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00001018 	.word	0x00001018

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001450 	.word	0x00001450

00000124 <__cs3_heap_start_ptr>:
 124:	000014a0 	.word	0x000014a0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001458 	.word	0x00001458
 170:	0000145b 	.word	0x0000145b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001458 	.word	0x00001458
 1bc:	00001458 	.word	0x00001458
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001458 	.word	0x00001458
 200:	00000000 	.word	0x00000000
 204:	00000f78 	.word	0x00000f78

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000f78 	.word	0x00000f78
 250:	0000145c 	.word	0x0000145c
 254:	00001018 	.word	0x00001018
 258:	00000000 	.word	0x00000000

0000025c <delay>:
}

/*******************************************************************************
 * Simple delay function
 ******************************************************************************/
void delay(int count) {
 25c:	e24dd008 	sub	sp, sp, #8
    volatile int i;
    for (i = 0; i < count; i++);
 260:	e3a03000 	mov	r3, #0
 264:	e58d3004 	str	r3, [sp, #4]
 268:	e59d3004 	ldr	r3, [sp, #4]
 26c:	e1500003 	cmp	r0, r3
 270:	da000005 	ble	28c <delay+0x30>
 274:	e59d3004 	ldr	r3, [sp, #4]
 278:	e2833001 	add	r3, r3, #1
 27c:	e58d3004 	str	r3, [sp, #4]
 280:	e59d3004 	ldr	r3, [sp, #4]
 284:	e1530000 	cmp	r3, r0
 288:	bafffff9 	blt	274 <delay+0x18>
}
 28c:	e28dd008 	add	sp, sp, #8
 290:	e12fff1e 	bx	lr

00000294 <video_text>:
 ******************************************************************************/
void video_text(int x, int y, char * text_ptr) {
    int offset;
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;

    offset = (y << 7) + x;
 294:	e0801381 	add	r1, r0, r1, lsl #7
    while (*(text_ptr)) {
 298:	e5d23000 	ldrb	r3, [r2]
 29c:	e3530000 	cmp	r3, #0
 2a0:	012fff1e 	bxeq	lr
 2a4:	e1a0c002 	mov	r12, r2
}

/*******************************************************************************
 * Subroutine to send a string of text to the video monitor
 ******************************************************************************/
void video_text(int x, int y, char * text_ptr) {
 2a8:	e0622001 	rsb	r2, r2, r1
 2ac:	e28224c9 	add	r2, r2, #-922746880	; 0xc9000000
    int offset;
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;

    offset = (y << 7) + x;
    while (*(text_ptr)) {
        *(character_buffer + offset) = *(text_ptr);
 2b0:	e7c2300c 	strb	r3, [r2, r12]
void video_text(int x, int y, char * text_ptr) {
    int offset;
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;

    offset = (y << 7) + x;
    while (*(text_ptr)) {
 2b4:	e5fc3001 	ldrb	r3, [r12, #1]!
 2b8:	e3530000 	cmp	r3, #0
 2bc:	1afffffb 	bne	2b0 <video_text+0x1c>
 2c0:	e12fff1e 	bx	lr

000002c4 <video_box>:
/*******************************************************************************
 * Draw a filled rectangle on the video monitor
 * Takes in points assuming 320x240 resolution and adjusts based on differences
 * in resolution and color bits.
 ******************************************************************************/
void video_box(int x1, int y1, int x2, int y2, short pixel_color) {
 2c4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 2c8:	e1a08001 	mov	r8, r1
 2cc:	e1a04002 	mov	r4, r2
 2d0:	e1a09003 	mov	r9, r3
 2d4:	e1dd62f8 	ldrsh	r6, [sp, #40]	; 0x28
    int pixel_buf_ptr = *(int *)PIXEL_BUF_CTRL_BASE;
 2d8:	e3033fff 	movw	r3, #16383	; 0x3fff
 2dc:	e34f3f20 	movt	r3, #65312	; 0xff20
 2e0:	e5135fdf 	ldr	r5, [r3, #-4063]	; 0xfffff021
    int pixel_ptr, row, col;
    int x_factor = 0x1 << (res_offset + col_offset);
 2e4:	e301c474 	movw	r12, #5236	; 0x1474
 2e8:	e340c000 	movt	r12, #0
 2ec:	e59c3000 	ldr	r3, [r12]
 2f0:	e59cb004 	ldr	r11, [r12, #4]
 2f4:	e083b00b 	add	r11, r3, r11
 2f8:	e3a0a001 	mov	r10, #1
 2fc:	e1a0bb1a 	lsl	r11, r10, r11
    int y_factor = 0x1 << (res_offset);
 300:	e1a0a31a 	lsl	r10, r10, r3
    x1 = x1 / x_factor;
 304:	e1a0100b 	mov	r1, r11
 308:	eb00019c 	bl	980 <__aeabi_idiv>
 30c:	e1a07000 	mov	r7, r0
    x2 = x2 / x_factor;
 310:	e1a00004 	mov	r0, r4
 314:	e1a0100b 	mov	r1, r11
 318:	eb000198 	bl	980 <__aeabi_idiv>
 31c:	e1a04000 	mov	r4, r0
    y1 = y1 / y_factor;
 320:	e1a00008 	mov	r0, r8
 324:	e1a0100a 	mov	r1, r10
 328:	eb000194 	bl	980 <__aeabi_idiv>
 32c:	e1a08000 	mov	r8, r0
    y2 = y2 / y_factor;
 330:	e1a00009 	mov	r0, r9
 334:	e1a0100a 	mov	r1, r10
 338:	eb000190 	bl	980 <__aeabi_idiv>

    /* assume that the box coordinates are valid */
    for (row = y1; row <= y2; row++)
 33c:	e1580000 	cmp	r8, r0
 340:	c8bd8ff8 	popgt	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 344:	ea00000d 	b	380 <video_box+0xbc>
        for (col = x1; col <= x2; ++col) {
            pixel_ptr = pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
 348:	e592c000 	ldr	r12, [r2]
 34c:	e26cc00a 	rsb	r12, r12, #10
 350:	e5921004 	ldr	r1, [r2, #4]
 354:	e061c00c 	rsb	r12, r1, r12
 358:	e1a01083 	lsl	r1, r3, #1
            *(short *)pixel_ptr = pixel_color;
 35c:	e085cc18 	add	r12, r5, r8, lsl r12
 360:	e18c60b1 	strh	r6, [r12, r1]
    y1 = y1 / y_factor;
    y2 = y2 / y_factor;

    /* assume that the box coordinates are valid */
    for (row = y1; row <= y2; row++)
        for (col = x1; col <= x2; ++col) {
 364:	e2833001 	add	r3, r3, #1
 368:	e1540003 	cmp	r4, r3
 36c:	aafffff5 	bge	348 <video_box+0x84>
    x2 = x2 / x_factor;
    y1 = y1 / y_factor;
    y2 = y2 / y_factor;

    /* assume that the box coordinates are valid */
    for (row = y1; row <= y2; row++)
 370:	e2888001 	add	r8, r8, #1
 374:	e1500008 	cmp	r0, r8
 378:	aa000002 	bge	388 <video_box+0xc4>
 37c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
        for (col = x1; col <= x2; ++col) {
            pixel_ptr = pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
 380:	e3012474 	movw	r2, #5236	; 0x1474
 384:	e3402000 	movt	r2, #0
    y1 = y1 / y_factor;
    y2 = y2 / y_factor;

    /* assume that the box coordinates are valid */
    for (row = y1; row <= y2; row++)
        for (col = x1; col <= x2; ++col) {
 388:	e1570004 	cmp	r7, r4
 38c:	d1a03007 	movle	r3, r7
 390:	daffffec 	ble	348 <video_box+0x84>
 394:	eafffff5 	b	370 <video_box+0xac>

00000398 <resample_rgb>:

/********************************************************************************
 * Resamples 24-bit color to 16-bit or 8-bit color
 *******************************************************************************/
int resample_rgb(int num_bits, int color) {
    if (num_bits == 8) {
 398:	e3500008 	cmp	r0, #8
 39c:	1a000008 	bne	3c4 <resample_rgb+0x2c>
        color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
 3a0:	e1a025c1 	asr	r2, r1, #11
 3a4:	e202201c 	and	r2, r2, #28
 3a8:	e1a03841 	asr	r3, r1, #16
 3ac:	e20330e0 	and	r3, r3, #224	; 0xe0
 3b0:	e1823003 	orr	r3, r2, r3
                 ((color >> 6) & 0x00000003));
 3b4:	e7e11351 	ubfx	r1, r1, #6, #2
/********************************************************************************
 * Resamples 24-bit color to 16-bit or 8-bit color
 *******************************************************************************/
int resample_rgb(int num_bits, int color) {
    if (num_bits == 8) {
        color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
 3b8:	e1831001 	orr	r1, r3, r1
                 ((color >> 6) & 0x00000003));
        color = (color << 8) | color;
 3bc:	e1811401 	orr	r1, r1, r1, lsl #8
 3c0:	ea000008 	b	3e8 <resample_rgb+0x50>
    } else if (num_bits == 16) {
 3c4:	e3500010 	cmp	r0, #16
 3c8:	1a000006 	bne	3e8 <resample_rgb+0x50>
        color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
 3cc:	e1a022c1 	asr	r2, r1, #5
 3d0:	e2022e7e 	and	r2, r2, #2016	; 0x7e0
 3d4:	e1a03441 	asr	r3, r1, #8
 3d8:	e2033b3e 	and	r3, r3, #63488	; 0xf800
 3dc:	e1823003 	orr	r3, r2, r3
                 ((color >> 3) & 0x0000001F));
 3e0:	e7e411d1 	ubfx	r1, r1, #3, #5
    if (num_bits == 8) {
        color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
                 ((color >> 6) & 0x00000003));
        color = (color << 8) | color;
    } else if (num_bits == 16) {
        color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
 3e4:	e1831001 	orr	r1, r3, r1
                 ((color >> 3) & 0x0000001F));
    }
    return color;
}
 3e8:	e1a00001 	mov	r0, r1
 3ec:	e12fff1e 	bx	lr

000003f0 <get_data_bits>:

/********************************************************************************
 * Finds the number of data bits from the mode
 *******************************************************************************/
int get_data_bits(int mode) {
    switch (mode) {
 3f0:	e3500039 	cmp	r0, #57	; 0x39
 3f4:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
 3f8:	ea00004b 	b	52c <get_data_bits+0x13c>
 3fc:	000004e4 	.word	0x000004e4
 400:	0000052c 	.word	0x0000052c
 404:	0000052c 	.word	0x0000052c
 408:	0000052c 	.word	0x0000052c
 40c:	0000052c 	.word	0x0000052c
 410:	0000052c 	.word	0x0000052c
 414:	0000052c 	.word	0x0000052c
 418:	00000534 	.word	0x00000534
 41c:	0000052c 	.word	0x0000052c
 420:	0000052c 	.word	0x0000052c
 424:	0000052c 	.word	0x0000052c
 428:	0000052c 	.word	0x0000052c
 42c:	0000052c 	.word	0x0000052c
 430:	0000052c 	.word	0x0000052c
 434:	0000052c 	.word	0x0000052c
 438:	0000052c 	.word	0x0000052c
 43c:	0000052c 	.word	0x0000052c
 440:	00000534 	.word	0x00000534
 444:	000004ec 	.word	0x000004ec
 448:	0000052c 	.word	0x0000052c
 44c:	000004f4 	.word	0x000004f4
 450:	0000052c 	.word	0x0000052c
 454:	0000052c 	.word	0x0000052c
 458:	000004fc 	.word	0x000004fc
 45c:	0000052c 	.word	0x0000052c
 460:	00000504 	.word	0x00000504
 464:	0000052c 	.word	0x0000052c
 468:	0000052c 	.word	0x0000052c
 46c:	0000052c 	.word	0x0000052c
 470:	0000052c 	.word	0x0000052c
 474:	0000052c 	.word	0x0000052c
 478:	0000052c 	.word	0x0000052c
 47c:	0000052c 	.word	0x0000052c
 480:	0000052c 	.word	0x0000052c
 484:	0000052c 	.word	0x0000052c
 488:	0000052c 	.word	0x0000052c
 48c:	0000052c 	.word	0x0000052c
 490:	0000052c 	.word	0x0000052c
 494:	0000052c 	.word	0x0000052c
 498:	0000052c 	.word	0x0000052c
 49c:	0000052c 	.word	0x0000052c
 4a0:	0000052c 	.word	0x0000052c
 4a4:	0000052c 	.word	0x0000052c
 4a8:	0000052c 	.word	0x0000052c
 4ac:	0000052c 	.word	0x0000052c
 4b0:	0000052c 	.word	0x0000052c
 4b4:	0000052c 	.word	0x0000052c
 4b8:	0000052c 	.word	0x0000052c
 4bc:	0000052c 	.word	0x0000052c
 4c0:	00000534 	.word	0x00000534
 4c4:	0000050c 	.word	0x0000050c
 4c8:	00000514 	.word	0x00000514
 4cc:	0000052c 	.word	0x0000052c
 4d0:	0000052c 	.word	0x0000052c
 4d4:	0000052c 	.word	0x0000052c
 4d8:	0000051c 	.word	0x0000051c
 4dc:	0000052c 	.word	0x0000052c
 4e0:	00000524 	.word	0x00000524
    case 0x0: return 1;
 4e4:	e3a00001 	mov	r0, #1
 4e8:	e12fff1e 	bx	lr
    case 0x7: return 8;
    case 0x11: return 8;
    case 0x12: return 9;
 4ec:	e3a00009 	mov	r0, #9
 4f0:	e12fff1e 	bx	lr
    case 0x14: return 16;
 4f4:	e3a00010 	mov	r0, #16
 4f8:	e12fff1e 	bx	lr
    case 0x17: return 24;
 4fc:	e3a00018 	mov	r0, #24
 500:	e12fff1e 	bx	lr
    case 0x19: return 30;
 504:	e3a0001e 	mov	r0, #30
 508:	e12fff1e 	bx	lr
    case 0x31: return 8;
    case 0x32: return 12;
 50c:	e3a0000c 	mov	r0, #12
 510:	e12fff1e 	bx	lr
    case 0x33: return 16;
 514:	e3a00010 	mov	r0, #16
 518:	e12fff1e 	bx	lr
    case 0x37: return 32;
 51c:	e3a00020 	mov	r0, #32
 520:	e12fff1e 	bx	lr
    case 0x39: return 40;
 524:	e3a00028 	mov	r0, #40	; 0x28
 528:	e12fff1e 	bx	lr
    default: return 16;
 52c:	e3a00010 	mov	r0, #16
 530:	e12fff1e 	bx	lr
 * Finds the number of data bits from the mode
 *******************************************************************************/
int get_data_bits(int mode) {
    switch (mode) {
    case 0x0: return 1;
    case 0x7: return 8;
 534:	e3a00008 	mov	r0, #8
    case 0x33: return 16;
    case 0x37: return 32;
    case 0x39: return 40;
    default: return 16;
    }
}
 538:	e12fff1e 	bx	lr

0000053c <clear_text_area>:

void clear_text_area(int x, int y, int width) {
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;
    int offset = (y << 7) + x;
 53c:	e0800381 	add	r0, r0, r1, lsl #7
    int i;
    
    for (i = 0; i < width; i++) {
 540:	e3520000 	cmp	r2, #0
 544:	d12fff1e 	bxle	lr
    case 0x39: return 40;
    default: return 16;
    }
}

void clear_text_area(int x, int y, int width) {
 548:	e28034c9 	add	r3, r0, #-922746880	; 0xc9000000
 54c:	e28214c9 	add	r1, r2, #-922746880	; 0xc9000000
 550:	e0801001 	add	r1, r0, r1
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;
    int offset = (y << 7) + x;
    int i;
    
    for (i = 0; i < width; i++) {
        *(character_buffer + offset + i) = ' '; // Espaço em branco
 554:	e3a02020 	mov	r2, #32
 558:	e4c32001 	strb	r2, [r3], #1
void clear_text_area(int x, int y, int width) {
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;
    int offset = (y << 7) + x;
    int i;
    
    for (i = 0; i < width; i++) {
 55c:	e1530001 	cmp	r3, r1
 560:	1afffffc 	bne	558 <clear_text_area+0x1c>
 564:	e12fff1e 	bx	lr

00000568 <main>:


/*******************************************************************************
 * Simplified Flappy Bird - Press KEY0 to jump
 ******************************************************************************/
int main(void) {
 568:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 56c:	e24dd014 	sub	sp, sp, #20
    volatile int * video_resolution = (int *)(PIXEL_BUF_CTRL_BASE + 0x8);
    screen_x = *video_resolution & 0xFFFF;
 570:	e3033fff 	movw	r3, #16383	; 0x3fff
 574:	e34f3f20 	movt	r3, #65312	; 0xff20
 578:	e5136fd7 	ldr	r6, [r3, #-4055]	; 0xfffff029
 57c:	e6ff6076 	uxth	r6, r6
 580:	e3014474 	movw	r4, #5236	; 0x1474
 584:	e3404000 	movt	r4, #0
 588:	e5846008 	str	r6, [r4, #8]
    screen_y = (*video_resolution >> 16) & 0xFFFF;
 58c:	e5132fd7 	ldr	r2, [r3, #-4055]	; 0xfffff029
 590:	e1a02822 	lsr	r2, r2, #16
 594:	e584200c 	str	r2, [r4, #12]

    volatile int * rgb_status = (int *)(RGB_RESAMPLER_BASE);
    int db = get_data_bits(*rgb_status & 0x3F);
 598:	e5130fef 	ldr	r0, [r3, #-4079]	; 0xfffff011
 59c:	e200003f 	and	r0, r0, #63	; 0x3f
 5a0:	ebffff92 	bl	3f0 <get_data_bits>
 5a4:	e1a05000 	mov	r5, r0

    /* check if resolution is smaller than the standard 320 x 240 */
    res_offset = (screen_x == 160) ? 1 : 0;
 5a8:	e35600a0 	cmp	r6, #160	; 0xa0
 5ac:	13a06000 	movne	r6, #0
 5b0:	03a06001 	moveq	r6, #1
 5b4:	e5846000 	str	r6, [r4]

    /* check if number of data bits is less than the standard 16-bits */
    col_offset = (db == 8) ? 1 : 0;
 5b8:	e3500008 	cmp	r0, #8
 5bc:	13a03000 	movne	r3, #0
 5c0:	03a03001 	moveq	r3, #1
 5c4:	e5843004 	str	r3, [r4, #4]

    /* update colors */
    short blue_color = resample_rgb(db, INTEL_BLUE);
 5c8:	e30711c5 	movw	r1, #29125	; 0x71c5
 5cc:	ebffff71 	bl	398 <resample_rgb>
 5d0:	e6ff8070 	uxth	r8, r0
    short green_color = resample_rgb(db, GREEN);
 5d4:	e1a00005 	mov	r0, r5
 5d8:	e3a01cff 	mov	r1, #65280	; 0xff00
 5dc:	ebffff6d 	bl	398 <resample_rgb>
 5e0:	e6ffa070 	uxth	r10, r0
    short yellow_color = resample_rgb(db, YELLOW);
 5e4:	e1a00005 	mov	r0, r5
 5e8:	e3a01cff 	mov	r1, #65280	; 0xff00
 5ec:	e34010ff 	movt	r1, #255	; 0xff
 5f0:	ebffff68 	bl	398 <resample_rgb>
 5f4:	e6ff7070 	uxth	r7, r0
    short red_color = resample_rgb(db, RED);
 5f8:	e1a00005 	mov	r0, r5
 5fc:	e3a018ff 	mov	r1, #16711680	; 0xff0000
 600:	ebffff64 	bl	398 <resample_rgb>
 604:	e6ff6070 	uxth	r6, r0

    // Initialize game
    bird_y = STANDARD_Y / 2;
 608:	e3a03078 	mov	r3, #120	; 0x78
 60c:	e5843010 	str	r3, [r4, #16]
    bird_velocity = 0;
 610:	e3a03000 	mov	r3, #0
 614:	e5843014 	str	r3, [r4, #20]
    pipe_x = STANDARD_X;
 618:	e3a02d05 	mov	r2, #320	; 0x140
 61c:	e5842018 	str	r2, [r4, #24]
    pipe_gap_y = 80;
 620:	e3a02050 	mov	r2, #80	; 0x50
 624:	e584201c 	str	r2, [r4, #28]
    score = 0;
 628:	e5843020 	str	r3, [r4, #32]
    game_active = true; // Start game immediately
 62c:	e3a03001 	mov	r3, #1
 630:	e5c43024 	strb	r3, [r4, #36]	; 0x24

    while (1) {
        volatile int * key_ptr = (int *)KEY_BASE;
        
        if (game_active) {
 634:	e3014474 	movw	r4, #5236	; 0x1474
 638:	e3404000 	movt	r4, #0
            
            // Draw bird
            video_box(BIRD_X, bird_y, BIRD_X + BIRD_SIZE - 1, bird_y + BIRD_SIZE - 1, yellow_color);
            
            // Show score
            video_text(1, 1, "Score:");
 63c:	e3005f7c 	movw	r5, #3964	; 0xf7c
 640:	e3405000 	movt	r5, #0
            } else if (score == 4) {
                video_text(7, 1, "4");
            } else if (score == 5) {
                video_text(7, 1, "5");
            } else if (score > 5) {
                video_text(7, 1, "5+");
 644:	e300bf9c 	movw	r11, #3996	; 0xf9c
 648:	e340b000 	movt	r11, #0
            } else if (score == 3) {
                video_text(7, 1, "3");
            } else if (score == 4) {
                video_text(7, 1, "4");
            } else if (score == 5) {
                video_text(7, 1, "5");
 64c:	e3003f98 	movw	r3, #3992	; 0xf98
 650:	e3403000 	movt	r3, #0
 654:	e58d300c 	str	r3, [sp, #12]
            } else if (score == 2) {
                video_text(7, 1, "2");
            } else if (score == 3) {
                video_text(7, 1, "3");
            } else if (score == 4) {
                video_text(7, 1, "4");
 658:	e3003f94 	movw	r3, #3988	; 0xf94
 65c:	e3403000 	movt	r3, #0
 660:	e58d3008 	str	r3, [sp, #8]
            
            // Update pipe
            pipe_x -= PIPE_SPEED;
            if (pipe_x < -PIPE_WIDTH) {
                pipe_x = STANDARD_X;
                pipe_gap_y = 60 + (rand() % 80);
 664:	e3069667 	movw	r9, #26215	; 0x6667
 668:	e3469666 	movt	r9, #26214	; 0x6666
    game_active = true; // Start game immediately

    while (1) {
        volatile int * key_ptr = (int *)KEY_BASE;
        
        if (game_active) {
 66c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
 670:	e3530000 	cmp	r3, #0
 674:	0a000094 	beq	8cc <main+0x364>
            // Game running
            
            // Check for jump input
            if ((*key_ptr & 0x1) == 0) { // KEY0 pressed
 678:	e3a03000 	mov	r3, #0
 67c:	e34f3f20 	movt	r3, #65312	; 0xff20
 680:	e5933050 	ldr	r3, [r3, #80]	; 0x50
 684:	e3130001 	tst	r3, #1
 688:	1a000003 	bne	69c <main+0x134>
                bird_velocity = JUMP_STRENGTH;
 68c:	e3a03008 	mov	r3, #8
 690:	e5843014 	str	r3, [r4, #20]
                delay(50000); // Simple debounce
 694:	e30c0350 	movw	r0, #50000	; 0xc350
 698:	ebfffeef 	bl	25c <delay>
            }
            
            // Update bird physics
            bird_velocity += GRAVITY;
 69c:	e5943014 	ldr	r3, [r4, #20]
 6a0:	e2433001 	sub	r3, r3, #1
 6a4:	e5843014 	str	r3, [r4, #20]
            bird_y += bird_velocity;
 6a8:	e5942010 	ldr	r2, [r4, #16]
 6ac:	e0833002 	add	r3, r3, r2
 6b0:	e5843010 	str	r3, [r4, #16]
            
            // Update pipe
            pipe_x -= PIPE_SPEED;
 6b4:	e5943018 	ldr	r3, [r4, #24]
 6b8:	e2433002 	sub	r3, r3, #2
            if (pipe_x < -PIPE_WIDTH) {
 6bc:	e373001e 	cmn	r3, #30
            // Update bird physics
            bird_velocity += GRAVITY;
            bird_y += bird_velocity;
            
            // Update pipe
            pipe_x -= PIPE_SPEED;
 6c0:	a5843018 	strge	r3, [r4, #24]
            if (pipe_x < -PIPE_WIDTH) {
 6c4:	aa00000c 	bge	6fc <main+0x194>
                pipe_x = STANDARD_X;
 6c8:	e3a03d05 	mov	r3, #320	; 0x140
 6cc:	e5843018 	str	r3, [r4, #24]
                pipe_gap_y = 60 + (rand() % 80);
 6d0:	eb000119 	bl	b3c <rand>
 6d4:	e0c23099 	smull	r3, r2, r9, r0
 6d8:	e1a03fc0 	asr	r3, r0, #31
 6dc:	e06332c2 	rsb	r3, r3, r2, asr #5
 6e0:	e0833103 	add	r3, r3, r3, lsl #2
 6e4:	e0400203 	sub	r0, r0, r3, lsl #4
 6e8:	e280003c 	add	r0, r0, #60	; 0x3c
 6ec:	e584001c 	str	r0, [r4, #28]
                score++;
 6f0:	e5943020 	ldr	r3, [r4, #32]
 6f4:	e2833001 	add	r3, r3, #1
 6f8:	e5843020 	str	r3, [r4, #32]
            }
            
            // Check collisions
            if (bird_y < 0 || bird_y > STANDARD_Y - BIRD_SIZE) {
 6fc:	e5942010 	ldr	r2, [r4, #16]
 700:	e35200e6 	cmp	r2, #230	; 0xe6
                game_active = false;
 704:	83a03000 	movhi	r3, #0
 708:	85c43024 	strbhi	r3, [r4, #36]	; 0x24
            }
            
            // Check pipe collision
            if (BIRD_X + BIRD_SIZE > pipe_x && BIRD_X < pipe_x + PIPE_WIDTH) {
 70c:	e5943018 	ldr	r3, [r4, #24]
 710:	e3530059 	cmp	r3, #89	; 0x59
 714:	ca00000b 	bgt	748 <main+0x1e0>
 718:	e283301e 	add	r3, r3, #30
 71c:	e3530050 	cmp	r3, #80	; 0x50
 720:	da000008 	ble	748 <main+0x1e0>
                if (bird_y < pipe_gap_y || bird_y + BIRD_SIZE > pipe_gap_y + PIPE_GAP) {
 724:	e594301c 	ldr	r3, [r4, #28]
 728:	e1520003 	cmp	r2, r3
 72c:	ba000003 	blt	740 <main+0x1d8>
 730:	e282200a 	add	r2, r2, #10
 734:	e2833050 	add	r3, r3, #80	; 0x50
 738:	e1520003 	cmp	r2, r3
 73c:	da000001 	ble	748 <main+0x1e0>
                    game_active = false;
 740:	e3a03000 	mov	r3, #0
 744:	e5c43024 	strb	r3, [r4, #36]	; 0x24
                }
            }
            
            // Clear screen
            video_box(0, 0, STANDARD_X, STANDARD_Y, blue_color);
 748:	e6bf3078 	sxth	r3, r8
 74c:	e58d3000 	str	r3, [sp]
 750:	e3a00000 	mov	r0, #0
 754:	e1a01000 	mov	r1, r0
 758:	e3a02d05 	mov	r2, #320	; 0x140
 75c:	e3a030f0 	mov	r3, #240	; 0xf0
 760:	ebfffed7 	bl	2c4 <video_box>
            
            // Draw pipe
            if (pipe_gap_y > 0) {
 764:	e594301c 	ldr	r3, [r4, #28]
 768:	e3530000 	cmp	r3, #0
 76c:	da000007 	ble	790 <main+0x228>
                video_box(pipe_x, 0, pipe_x + PIPE_WIDTH - 1, pipe_gap_y - 1, green_color);
 770:	e5942018 	ldr	r2, [r4, #24]
 774:	e6bf107a 	sxth	r1, r10
 778:	e58d1000 	str	r1, [sp]
 77c:	e1a00002 	mov	r0, r2
 780:	e3a01000 	mov	r1, #0
 784:	e282201d 	add	r2, r2, #29
 788:	e2433001 	sub	r3, r3, #1
 78c:	ebfffecc 	bl	2c4 <video_box>
            }
            if (pipe_gap_y + PIPE_GAP < STANDARD_Y) {
 790:	e594101c 	ldr	r1, [r4, #28]
 794:	e2811050 	add	r1, r1, #80	; 0x50
 798:	e35100ef 	cmp	r1, #239	; 0xef
 79c:	ca000006 	bgt	7bc <main+0x254>
                video_box(pipe_x, pipe_gap_y + PIPE_GAP, pipe_x + PIPE_WIDTH - 1, STANDARD_Y - 1, green_color);
 7a0:	e5942018 	ldr	r2, [r4, #24]
 7a4:	e6bf307a 	sxth	r3, r10
 7a8:	e58d3000 	str	r3, [sp]
 7ac:	e1a00002 	mov	r0, r2
 7b0:	e282201d 	add	r2, r2, #29
 7b4:	e3a030ef 	mov	r3, #239	; 0xef
 7b8:	ebfffec1 	bl	2c4 <video_box>
            }
            
            // Draw bird
            video_box(BIRD_X, bird_y, BIRD_X + BIRD_SIZE - 1, bird_y + BIRD_SIZE - 1, yellow_color);
 7bc:	e5943010 	ldr	r3, [r4, #16]
 7c0:	e6bf2077 	sxth	r2, r7
 7c4:	e58d2000 	str	r2, [sp]
 7c8:	e3a00050 	mov	r0, #80	; 0x50
 7cc:	e1a01003 	mov	r1, r3
 7d0:	e3a02059 	mov	r2, #89	; 0x59
 7d4:	e2833009 	add	r3, r3, #9
 7d8:	ebfffeb9 	bl	2c4 <video_box>
            
            // Show score
            video_text(1, 1, "Score:");
 7dc:	e3a00001 	mov	r0, #1
 7e0:	e1a01000 	mov	r1, r0
 7e4:	e1a02005 	mov	r2, r5
 7e8:	ebfffea9 	bl	294 <video_text>
            if (score == 0) {
 7ec:	e5943020 	ldr	r3, [r4, #32]
 7f0:	e3530000 	cmp	r3, #0
 7f4:	1a000005 	bne	810 <main+0x2a8>
                video_text(7, 1, "0");
 7f8:	e3a00007 	mov	r0, #7
 7fc:	e3a01001 	mov	r1, #1
 800:	e3002f84 	movw	r2, #3972	; 0xf84
 804:	e3402000 	movt	r2, #0
 808:	ebfffea1 	bl	294 <video_text>
 80c:	ea00002b 	b	8c0 <main+0x358>
            } else if (score == 1) {
 810:	e3530001 	cmp	r3, #1
 814:	1a000005 	bne	830 <main+0x2c8>
                video_text(7, 1, "1");
 818:	e3a00007 	mov	r0, #7
 81c:	e3a01001 	mov	r1, #1
 820:	e3002f88 	movw	r2, #3976	; 0xf88
 824:	e3402000 	movt	r2, #0
 828:	ebfffe99 	bl	294 <video_text>
 82c:	ea000023 	b	8c0 <main+0x358>
            } else if (score == 2) {
 830:	e3530002 	cmp	r3, #2
 834:	1a000005 	bne	850 <main+0x2e8>
                video_text(7, 1, "2");
 838:	e3a00007 	mov	r0, #7
 83c:	e3a01001 	mov	r1, #1
 840:	e3002f8c 	movw	r2, #3980	; 0xf8c
 844:	e3402000 	movt	r2, #0
 848:	ebfffe91 	bl	294 <video_text>
 84c:	ea00001b 	b	8c0 <main+0x358>
            } else if (score == 3) {
 850:	e3530003 	cmp	r3, #3
 854:	1a000005 	bne	870 <main+0x308>
                video_text(7, 1, "3");
 858:	e3a00007 	mov	r0, #7
 85c:	e3a01001 	mov	r1, #1
 860:	e3002f90 	movw	r2, #3984	; 0xf90
 864:	e3402000 	movt	r2, #0
 868:	ebfffe89 	bl	294 <video_text>
 86c:	ea000013 	b	8c0 <main+0x358>
            } else if (score == 4) {
 870:	e3530004 	cmp	r3, #4
 874:	1a000004 	bne	88c <main+0x324>
                video_text(7, 1, "4");
 878:	e3a00007 	mov	r0, #7
 87c:	e3a01001 	mov	r1, #1
 880:	e59d2008 	ldr	r2, [sp, #8]
 884:	ebfffe82 	bl	294 <video_text>
 888:	ea00000c 	b	8c0 <main+0x358>
            } else if (score == 5) {
 88c:	e3530005 	cmp	r3, #5
 890:	1a000004 	bne	8a8 <main+0x340>
                video_text(7, 1, "5");
 894:	e3a00007 	mov	r0, #7
 898:	e3a01001 	mov	r1, #1
 89c:	e59d200c 	ldr	r2, [sp, #12]
 8a0:	ebfffe7b 	bl	294 <video_text>
 8a4:	ea000005 	b	8c0 <main+0x358>
            } else if (score > 5) {
 8a8:	e3530005 	cmp	r3, #5
 8ac:	da000003 	ble	8c0 <main+0x358>
                video_text(7, 1, "5+");
 8b0:	e3a00007 	mov	r0, #7
 8b4:	e3a01001 	mov	r1, #1
 8b8:	e1a0200b 	mov	r2, r11
 8bc:	ebfffe74 	bl	294 <video_text>
            }
            
            delay(30000);
 8c0:	e3070530 	movw	r0, #30000	; 0x7530
 8c4:	ebfffe64 	bl	25c <delay>
 8c8:	eaffff67 	b	66c <main+0x104>
            
        } else {
            // GAME OVER - Tela vermelha com mensagem
            video_box(0, 0, STANDARD_X, STANDARD_Y, red_color);
 8cc:	e6bf3076 	sxth	r3, r6
 8d0:	e58d3000 	str	r3, [sp]
 8d4:	e3a00000 	mov	r0, #0
 8d8:	e1a01000 	mov	r1, r0
 8dc:	e3a02d05 	mov	r2, #320	; 0x140
 8e0:	e3a030f0 	mov	r3, #240	; 0xf0
 8e4:	ebfffe76 	bl	2c4 <video_box>
            video_text(35, 29, "GAME OVER");
 8e8:	e3a00023 	mov	r0, #35	; 0x23
 8ec:	e3a0101d 	mov	r1, #29
 8f0:	e3002fa0 	movw	r2, #4000	; 0xfa0
 8f4:	e3402000 	movt	r2, #0
 8f8:	ebfffe65 	bl	294 <video_text>
            video_text(32, 30, "Press KEY1 restart");
 8fc:	e3a00020 	mov	r0, #32
 900:	e3a0101e 	mov	r1, #30
 904:	e3002fac 	movw	r2, #4012	; 0xfac
 908:	e3402000 	movt	r2, #0
 90c:	ebfffe60 	bl	294 <video_text>
            
            // Aguarda KEY1 para reiniciar
            if ((*key_ptr & 0x2) != 0) { // KEY1 pressed
 910:	e3a03000 	mov	r3, #0
 914:	e34f3f20 	movt	r3, #65312	; 0xff20
 918:	e5933050 	ldr	r3, [r3, #80]	; 0x50
 91c:	e3130002 	tst	r3, #2
 920:	0affff51 	beq	66c <main+0x104>
                clear_text_area(35, 29, 9);  // Limpa "GAME OVER" (9 caracteres)
 924:	e3a00023 	mov	r0, #35	; 0x23
 928:	e3a0101d 	mov	r1, #29
 92c:	e3a02009 	mov	r2, #9
 930:	ebffff01 	bl	53c <clear_text_area>
                clear_text_area(32, 30, 18); // Limpa "Press KEY1 restart" (18 caracteres)
 934:	e3a00020 	mov	r0, #32
 938:	e3a0101e 	mov	r1, #30
 93c:	e3a02012 	mov	r2, #18
 940:	ebfffefd 	bl	53c <clear_text_area>
                game_active = true;
 944:	e3a03001 	mov	r3, #1
 948:	e5c43024 	strb	r3, [r4, #36]	; 0x24
                bird_y = STANDARD_Y / 2;
 94c:	e3a03078 	mov	r3, #120	; 0x78
 950:	e5843010 	str	r3, [r4, #16]
                bird_velocity = 0;
 954:	e3a03000 	mov	r3, #0
 958:	e5843014 	str	r3, [r4, #20]
                pipe_x = STANDARD_X;
 95c:	e3a02d05 	mov	r2, #320	; 0x140
 960:	e5842018 	str	r2, [r4, #24]
                pipe_gap_y = 80;
 964:	e3a02050 	mov	r2, #80	; 0x50
 968:	e584201c 	str	r2, [r4, #28]
                score = 0;
 96c:	e5843020 	str	r3, [r4, #32]
                delay(200000);
 970:	e3a00d35 	mov	r0, #3392	; 0xd40
 974:	e3400003 	movt	r0, #3
 978:	ebfffe37 	bl	25c <delay>
 97c:	eaffff3a 	b	66c <main+0x104>

00000980 <__aeabi_idiv>:
 980:	e3510000 	cmp	r1, #0
 984:	0a000043 	beq	a98 <.divsi3_skip_div0_test+0x110>

00000988 <.divsi3_skip_div0_test>:
 988:	e020c001 	eor	r12, r0, r1
 98c:	42611000 	rsbmi	r1, r1, #0
 990:	e2512001 	subs	r2, r1, #1
 994:	0a000027 	beq	a38 <.divsi3_skip_div0_test+0xb0>
 998:	e1b03000 	movs	r3, r0
 99c:	42603000 	rsbmi	r3, r0, #0
 9a0:	e1530001 	cmp	r3, r1
 9a4:	9a000026 	bls	a44 <.divsi3_skip_div0_test+0xbc>
 9a8:	e1110002 	tst	r1, r2
 9ac:	0a000028 	beq	a54 <.divsi3_skip_div0_test+0xcc>
 9b0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 9b4:	01a01181 	lsleq	r1, r1, #3
 9b8:	03a02008 	moveq	r2, #8
 9bc:	13a02001 	movne	r2, #1
 9c0:	e3510201 	cmp	r1, #268435456	; 0x10000000
 9c4:	31510003 	cmpcc	r1, r3
 9c8:	31a01201 	lslcc	r1, r1, #4
 9cc:	31a02202 	lslcc	r2, r2, #4
 9d0:	3afffffa 	bcc	9c0 <.divsi3_skip_div0_test+0x38>
 9d4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 9d8:	31510003 	cmpcc	r1, r3
 9dc:	31a01081 	lslcc	r1, r1, #1
 9e0:	31a02082 	lslcc	r2, r2, #1
 9e4:	3afffffa 	bcc	9d4 <.divsi3_skip_div0_test+0x4c>
 9e8:	e3a00000 	mov	r0, #0
 9ec:	e1530001 	cmp	r3, r1
 9f0:	20433001 	subcs	r3, r3, r1
 9f4:	21800002 	orrcs	r0, r0, r2
 9f8:	e15300a1 	cmp	r3, r1, lsr #1
 9fc:	204330a1 	subcs	r3, r3, r1, lsr #1
 a00:	218000a2 	orrcs	r0, r0, r2, lsr #1
 a04:	e1530121 	cmp	r3, r1, lsr #2
 a08:	20433121 	subcs	r3, r3, r1, lsr #2
 a0c:	21800122 	orrcs	r0, r0, r2, lsr #2
 a10:	e15301a1 	cmp	r3, r1, lsr #3
 a14:	204331a1 	subcs	r3, r3, r1, lsr #3
 a18:	218001a2 	orrcs	r0, r0, r2, lsr #3
 a1c:	e3530000 	cmp	r3, #0
 a20:	11b02222 	lsrsne	r2, r2, #4
 a24:	11a01221 	lsrne	r1, r1, #4
 a28:	1affffef 	bne	9ec <.divsi3_skip_div0_test+0x64>
 a2c:	e35c0000 	cmp	r12, #0
 a30:	42600000 	rsbmi	r0, r0, #0
 a34:	e12fff1e 	bx	lr
 a38:	e13c0000 	teq	r12, r0
 a3c:	42600000 	rsbmi	r0, r0, #0
 a40:	e12fff1e 	bx	lr
 a44:	33a00000 	movcc	r0, #0
 a48:	01a00fcc 	asreq	r0, r12, #31
 a4c:	03800001 	orreq	r0, r0, #1
 a50:	e12fff1e 	bx	lr
 a54:	e3510801 	cmp	r1, #65536	; 0x10000
 a58:	21a01821 	lsrcs	r1, r1, #16
 a5c:	23a02010 	movcs	r2, #16
 a60:	33a02000 	movcc	r2, #0
 a64:	e3510c01 	cmp	r1, #256	; 0x100
 a68:	21a01421 	lsrcs	r1, r1, #8
 a6c:	22822008 	addcs	r2, r2, #8
 a70:	e3510010 	cmp	r1, #16
 a74:	21a01221 	lsrcs	r1, r1, #4
 a78:	22822004 	addcs	r2, r2, #4
 a7c:	e3510004 	cmp	r1, #4
 a80:	82822003 	addhi	r2, r2, #3
 a84:	908220a1 	addls	r2, r2, r1, lsr #1
 a88:	e35c0000 	cmp	r12, #0
 a8c:	e1a00233 	lsr	r0, r3, r2
 a90:	42600000 	rsbmi	r0, r0, #0
 a94:	e12fff1e 	bx	lr
 a98:	e3500000 	cmp	r0, #0
 a9c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 aa0:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 aa4:	ea000007 	b	ac8 <__aeabi_idiv0>

00000aa8 <__aeabi_idivmod>:
 aa8:	e3510000 	cmp	r1, #0
 aac:	0afffff9 	beq	a98 <.divsi3_skip_div0_test+0x110>
 ab0:	e92d4003 	push	{r0, r1, lr}
 ab4:	ebffffb3 	bl	988 <.divsi3_skip_div0_test>
 ab8:	e8bd4006 	pop	{r1, r2, lr}
 abc:	e0030092 	mul	r3, r2, r0
 ac0:	e0411003 	sub	r1, r1, r3
 ac4:	e12fff1e 	bx	lr

00000ac8 <__aeabi_idiv0>:
 ac8:	e12fff1e 	bx	lr

00000acc <atexit>:
 acc:	e1a01000 	mov	r1, r0
 ad0:	e3a00000 	mov	r0, #0
 ad4:	e92d4008 	push	{r3, lr}
 ad8:	e1a02000 	mov	r2, r0
 adc:	e1a03000 	mov	r3, r0
 ae0:	eb00002c 	bl	b98 <__register_exitproc>
 ae4:	e8bd4008 	pop	{r3, lr}
 ae8:	e12fff1e 	bx	lr

00000aec <exit>:
 aec:	e92d4008 	push	{r3, lr}
 af0:	e3a01000 	mov	r1, #0
 af4:	e1a04000 	mov	r4, r0
 af8:	eb000063 	bl	c8c <__call_exitprocs>
 afc:	e59f3018 	ldr	r3, [pc, #24]	; b1c <exit+0x30>
 b00:	e5930000 	ldr	r0, [r3]
 b04:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 b08:	e3530000 	cmp	r3, #0
 b0c:	11a0e00f 	movne	lr, pc
 b10:	112fff13 	bxne	r3
 b14:	e1a00004 	mov	r0, r4
 b18:	eb0000e7 	bl	ebc <_exit>
 b1c:	00000fc0 	.word	0x00000fc0

00000b20 <srand>:
 b20:	e59f3010 	ldr	r3, [pc, #16]	; b38 <srand+0x18>
 b24:	e5933000 	ldr	r3, [r3]
 b28:	e3a02000 	mov	r2, #0
 b2c:	e58300a8 	str	r0, [r3, #168]	; 0xa8
 b30:	e58320ac 	str	r2, [r3, #172]	; 0xac
 b34:	e12fff1e 	bx	lr
 b38:	00001020 	.word	0x00001020

00000b3c <rand>:
 b3c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
 b40:	e59f3044 	ldr	r3, [pc, #68]	; b8c <rand+0x50>
 b44:	e593c000 	ldr	r12, [r3]
 b48:	e59f4040 	ldr	r4, [pc, #64]	; b90 <rand+0x54>
 b4c:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
 b50:	e0040492 	mul	r4, r2, r4
 b54:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
 b58:	e59f3034 	ldr	r3, [pc, #52]	; b94 <rand+0x58>
 b5c:	e0244193 	mla	r4, r3, r1, r4
 b60:	e0810392 	umull	r0, r1, r2, r3
 b64:	e3a02001 	mov	r2, #1
 b68:	e0922000 	adds	r2, r2, r0
 b6c:	e0841001 	add	r1, r4, r1
 b70:	e3a03000 	mov	r3, #0
 b74:	e0a33001 	adc	r3, r3, r1
 b78:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
 b7c:	e58c30ac 	str	r3, [r12, #172]	; 0xac
 b80:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
 b84:	e8bd0010 	ldmfd	sp!, {r4}
 b88:	e12fff1e 	bx	lr
 b8c:	00001020 	.word	0x00001020
 b90:	5851f42d 	.word	0x5851f42d
 b94:	4c957f2d 	.word	0x4c957f2d

00000b98 <__register_exitproc>:
 b98:	e59fc0e4 	ldr	r12, [pc, #228]	; c84 <__register_exitproc+0xec>
 b9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 ba0:	e59c4000 	ldr	r4, [r12]
 ba4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 ba8:	e35c0000 	cmp	r12, #0
 bac:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 bb0:	e59c5004 	ldr	r5, [r12, #4]
 bb4:	0584c148 	streq	r12, [r4, #328]	; 0x148
 bb8:	e355001f 	cmp	r5, #31
 bbc:	e24dd010 	sub	sp, sp, #16
 bc0:	e1a06000 	mov	r6, r0
 bc4:	da000015 	ble	c20 <__register_exitproc+0x88>
 bc8:	e59f00b8 	ldr	r0, [pc, #184]	; c88 <__register_exitproc+0xf0>
 bcc:	e3500000 	cmp	r0, #0
 bd0:	1a000001 	bne	bdc <__register_exitproc+0x44>
 bd4:	e3e00000 	mvn	r0, #0
 bd8:	ea000018 	b	c40 <__register_exitproc+0xa8>
 bdc:	e3a00e19 	mov	r0, #400	; 0x190
 be0:	e58d100c 	str	r1, [sp, #12]
 be4:	e58d2008 	str	r2, [sp, #8]
 be8:	e58d3004 	str	r3, [sp, #4]
 bec:	e320f000 	nop	{0}
 bf0:	e250c000 	subs	r12, r0, #0
 bf4:	e59d100c 	ldr	r1, [sp, #12]
 bf8:	e59d2008 	ldr	r2, [sp, #8]
 bfc:	e59d3004 	ldr	r3, [sp, #4]
 c00:	0afffff3 	beq	bd4 <__register_exitproc+0x3c>
 c04:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 c08:	e3a00000 	mov	r0, #0
 c0c:	e58c0004 	str	r0, [r12, #4]
 c10:	e58c5000 	str	r5, [r12]
 c14:	e584c148 	str	r12, [r4, #328]	; 0x148
 c18:	e58c0188 	str	r0, [r12, #392]	; 0x188
 c1c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 c20:	e3560000 	cmp	r6, #0
 c24:	e59c4004 	ldr	r4, [r12, #4]
 c28:	1a000007 	bne	c4c <__register_exitproc+0xb4>
 c2c:	e2843002 	add	r3, r4, #2
 c30:	e2844001 	add	r4, r4, #1
 c34:	e78c1103 	str	r1, [r12, r3, lsl #2]
 c38:	e58c4004 	str	r4, [r12, #4]
 c3c:	e3a00000 	mov	r0, #0
 c40:	e28dd010 	add	sp, sp, #16
 c44:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 c48:	e12fff1e 	bx	lr
 c4c:	e3a00001 	mov	r0, #1
 c50:	e1a00410 	lsl	r0, r0, r4
 c54:	e08c8104 	add	r8, r12, r4, lsl #2
 c58:	e3560002 	cmp	r6, #2
 c5c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 c60:	e5883108 	str	r3, [r8, #264]	; 0x108
 c64:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 c68:	e1877000 	orr	r7, r7, r0
 c6c:	01830000 	orreq	r0, r3, r0
 c70:	e1a05008 	mov	r5, r8
 c74:	e5882088 	str	r2, [r8, #136]	; 0x88
 c78:	e58c7188 	str	r7, [r12, #392]	; 0x188
 c7c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 c80:	eaffffe9 	b	c2c <__register_exitproc+0x94>
 c84:	00000fc0 	.word	0x00000fc0
 c88:	00000000 	.word	0x00000000

00000c8c <__call_exitprocs>:
 c8c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 c90:	e59f3168 	ldr	r3, [pc, #360]	; e00 <__call_exitprocs+0x174>
 c94:	e5933000 	ldr	r3, [r3]
 c98:	e24dd014 	sub	sp, sp, #20
 c9c:	e58d3004 	str	r3, [sp, #4]
 ca0:	e2833f52 	add	r3, r3, #328	; 0x148
 ca4:	e58d0008 	str	r0, [sp, #8]
 ca8:	e58d300c 	str	r3, [sp, #12]
 cac:	e1a07001 	mov	r7, r1
 cb0:	e3a08001 	mov	r8, #1
 cb4:	e59d3004 	ldr	r3, [sp, #4]
 cb8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 cbc:	e3560000 	cmp	r6, #0
 cc0:	e59db00c 	ldr	r11, [sp, #12]
 cc4:	0a000033 	beq	d98 <__call_exitprocs+0x10c>
 cc8:	e5965004 	ldr	r5, [r6, #4]
 ccc:	e2554001 	subs	r4, r5, #1
 cd0:	5286a088 	addpl	r10, r6, #136	; 0x88
 cd4:	5285501f 	addpl	r5, r5, #31
 cd8:	508a5105 	addpl	r5, r10, r5, lsl #2
 cdc:	5a000007 	bpl	d00 <__call_exitprocs+0x74>
 ce0:	ea000029 	b	d8c <__call_exitprocs+0x100>
 ce4:	e5953000 	ldr	r3, [r5]
 ce8:	e1530007 	cmp	r3, r7
 cec:	0a000005 	beq	d08 <__call_exitprocs+0x7c>
 cf0:	e2444001 	sub	r4, r4, #1
 cf4:	e3740001 	cmn	r4, #1
 cf8:	e2455004 	sub	r5, r5, #4
 cfc:	0a000022 	beq	d8c <__call_exitprocs+0x100>
 d00:	e3570000 	cmp	r7, #0
 d04:	1afffff6 	bne	ce4 <__call_exitprocs+0x58>
 d08:	e5963004 	ldr	r3, [r6, #4]
 d0c:	e06a2005 	rsb	r2, r10, r5
 d10:	e2433001 	sub	r3, r3, #1
 d14:	e0862002 	add	r2, r6, r2
 d18:	e1530004 	cmp	r3, r4
 d1c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 d20:	13a01000 	movne	r1, #0
 d24:	05864004 	streq	r4, [r6, #4]
 d28:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 d2c:	e3530000 	cmp	r3, #0
 d30:	0affffee 	beq	cf0 <__call_exitprocs+0x64>
 d34:	e1a02418 	lsl	r2, r8, r4
 d38:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 d3c:	e1120001 	tst	r2, r1
 d40:	e5969004 	ldr	r9, [r6, #4]
 d44:	0a000016 	beq	da4 <__call_exitprocs+0x118>
 d48:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 d4c:	e1120001 	tst	r2, r1
 d50:	1a000016 	bne	db0 <__call_exitprocs+0x124>
 d54:	e59d0008 	ldr	r0, [sp, #8]
 d58:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 d5c:	e1a0e00f 	mov	lr, pc
 d60:	e12fff13 	bx	r3
 d64:	e5963004 	ldr	r3, [r6, #4]
 d68:	e1530009 	cmp	r3, r9
 d6c:	1affffd0 	bne	cb4 <__call_exitprocs+0x28>
 d70:	e59b3000 	ldr	r3, [r11]
 d74:	e1530006 	cmp	r3, r6
 d78:	1affffcd 	bne	cb4 <__call_exitprocs+0x28>
 d7c:	e2444001 	sub	r4, r4, #1
 d80:	e3740001 	cmn	r4, #1
 d84:	e2455004 	sub	r5, r5, #4
 d88:	1affffdc 	bne	d00 <__call_exitprocs+0x74>
 d8c:	e59f1070 	ldr	r1, [pc, #112]	; e04 <__call_exitprocs+0x178>
 d90:	e3510000 	cmp	r1, #0
 d94:	1a000009 	bne	dc0 <__call_exitprocs+0x134>
 d98:	e28dd014 	add	sp, sp, #20
 d9c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 da0:	e12fff1e 	bx	lr
 da4:	e1a0e00f 	mov	lr, pc
 da8:	e12fff13 	bx	r3
 dac:	eaffffec 	b	d64 <__call_exitprocs+0xd8>
 db0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 db4:	e1a0e00f 	mov	lr, pc
 db8:	e12fff13 	bx	r3
 dbc:	eaffffe8 	b	d64 <__call_exitprocs+0xd8>
 dc0:	e5963004 	ldr	r3, [r6, #4]
 dc4:	e3530000 	cmp	r3, #0
 dc8:	e5963000 	ldr	r3, [r6]
 dcc:	1a000008 	bne	df4 <__call_exitprocs+0x168>
 dd0:	e3530000 	cmp	r3, #0
 dd4:	0a000006 	beq	df4 <__call_exitprocs+0x168>
 dd8:	e1a00006 	mov	r0, r6
 ddc:	e58b3000 	str	r3, [r11]
 de0:	e320f000 	nop	{0}
 de4:	e59b6000 	ldr	r6, [r11]
 de8:	e3560000 	cmp	r6, #0
 dec:	1affffb5 	bne	cc8 <__call_exitprocs+0x3c>
 df0:	eaffffe8 	b	d98 <__call_exitprocs+0x10c>
 df4:	e1a0b006 	mov	r11, r6
 df8:	e1a06003 	mov	r6, r3
 dfc:	eafffff9 	b	de8 <__call_exitprocs+0x15c>
 e00:	00000fc0 	.word	0x00000fc0
 e04:	00000000 	.word	0x00000000

00000e08 <register_fini>:
 e08:	e92d4008 	push	{r3, lr}
 e0c:	e59f3010 	ldr	r3, [pc, #16]	; e24 <register_fini+0x1c>
 e10:	e3530000 	cmp	r3, #0
 e14:	159f000c 	ldrne	r0, [pc, #12]	; e28 <register_fini+0x20>
 e18:	1bffff2b 	blne	acc <atexit>
 e1c:	e8bd4008 	pop	{r3, lr}
 e20:	e12fff1e 	bx	lr
 e24:	00000fe8 	.word	0x00000fe8
 e28:	00000e2c 	.word	0x00000e2c

00000e2c <__libc_fini_array>:
 e2c:	e92d4038 	push	{r3, r4, r5, lr}
 e30:	e59f5030 	ldr	r5, [pc, #48]	; e68 <__libc_fini_array+0x3c>
 e34:	e59f4030 	ldr	r4, [pc, #48]	; e6c <__libc_fini_array+0x40>
 e38:	e0654004 	rsb	r4, r5, r4
 e3c:	e1b04144 	asrs	r4, r4, #2
 e40:	10855104 	addne	r5, r5, r4, lsl #2
 e44:	0a000004 	beq	e5c <__libc_fini_array+0x30>
 e48:	e5353004 	ldr	r3, [r5, #-4]!
 e4c:	e1a0e00f 	mov	lr, pc
 e50:	e12fff13 	bx	r3
 e54:	e2544001 	subs	r4, r4, #1
 e58:	1afffffa 	bne	e48 <__libc_fini_array+0x1c>
 e5c:	eb000061 	bl	fe8 <__libc_fini>
 e60:	e8bd4038 	pop	{r3, r4, r5, lr}
 e64:	e12fff1e 	bx	lr
 e68:	00001000 	.word	0x00001000
 e6c:	00001004 	.word	0x00001004

00000e70 <__cs3_premain>:
 e70:	e92d4008 	push	{r3, lr}
 e74:	eb00001d 	bl	ef0 <__libc_init_array>
 e78:	e59f3030 	ldr	r3, [pc, #48]	; eb0 <__cs3_premain+0x40>
 e7c:	e3530000 	cmp	r3, #0
 e80:	15930000 	ldrne	r0, [r3]
 e84:	01a00003 	moveq	r0, r3
 e88:	e59f3024 	ldr	r3, [pc, #36]	; eb4 <__cs3_premain+0x44>
 e8c:	e3530000 	cmp	r3, #0
 e90:	15931000 	ldrne	r1, [r3]
 e94:	01a01003 	moveq	r1, r3
 e98:	e3a02000 	mov	r2, #0
 e9c:	ebfffdb1 	bl	568 <main>
 ea0:	e59f3010 	ldr	r3, [pc, #16]	; eb8 <__cs3_premain+0x48>
 ea4:	e3530000 	cmp	r3, #0
 ea8:	1bffff0f 	blne	aec <exit>
 eac:	eafffffe 	b	eac <__cs3_premain+0x3c>
	...
 eb8:	00000aec 	.word	0x00000aec

00000ebc <_exit>:
 ebc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 ec0:	e3a00018 	mov	r0, #24
 ec4:	e59f1004 	ldr	r1, [pc, #4]	; ed0 <_exit+0x14>
 ec8:	ef123456 	svc	0x00123456
 ecc:	eafffffe 	b	ecc <_exit+0x10>
 ed0:	00020026 	.word	0x00020026

00000ed4 <__cs3_isr_interrupt>:
 ed4:	eafffffe 	b	ed4 <__cs3_isr_interrupt>

00000ed8 <__cs3_isr_undef>:
 ed8:	eafffffe 	b	ed8 <__cs3_isr_undef>

00000edc <__cs3_isr_swi>:
 edc:	eafffffe 	b	edc <__cs3_isr_swi>

00000ee0 <__cs3_isr_pabort>:
 ee0:	eafffffe 	b	ee0 <__cs3_isr_pabort>

00000ee4 <__cs3_isr_dabort>:
 ee4:	eafffffe 	b	ee4 <__cs3_isr_dabort>

00000ee8 <__cs3_isr_irq>:
 ee8:	eafffffe 	b	ee8 <__cs3_isr_irq>

00000eec <__cs3_isr_fiq>:
 eec:	eafffffe 	b	eec <__cs3_isr_fiq>

00000ef0 <__libc_init_array>:
 ef0:	e92d4070 	push	{r4, r5, r6, lr}
 ef4:	e59f506c 	ldr	r5, [pc, #108]	; f68 <__libc_init_array+0x78>
 ef8:	e59f606c 	ldr	r6, [pc, #108]	; f6c <__libc_init_array+0x7c>
 efc:	e0656006 	rsb	r6, r5, r6
 f00:	e1b06146 	asrs	r6, r6, #2
 f04:	12455004 	subne	r5, r5, #4
 f08:	13a04000 	movne	r4, #0
 f0c:	0a000005 	beq	f28 <__libc_init_array+0x38>
 f10:	e5b53004 	ldr	r3, [r5, #4]!
 f14:	e2844001 	add	r4, r4, #1
 f18:	e1a0e00f 	mov	lr, pc
 f1c:	e12fff13 	bx	r3
 f20:	e1560004 	cmp	r6, r4
 f24:	1afffff9 	bne	f10 <__libc_init_array+0x20>
 f28:	e59f5040 	ldr	r5, [pc, #64]	; f70 <__libc_init_array+0x80>
 f2c:	e59f6040 	ldr	r6, [pc, #64]	; f74 <__libc_init_array+0x84>
 f30:	e0656006 	rsb	r6, r5, r6
 f34:	eb000023 	bl	fc8 <_init>
 f38:	e1b06146 	asrs	r6, r6, #2
 f3c:	12455004 	subne	r5, r5, #4
 f40:	13a04000 	movne	r4, #0
 f44:	0a000005 	beq	f60 <__libc_init_array+0x70>
 f48:	e5b53004 	ldr	r3, [r5, #4]!
 f4c:	e2844001 	add	r4, r4, #1
 f50:	e1a0e00f 	mov	lr, pc
 f54:	e12fff13 	bx	r3
 f58:	e1560004 	cmp	r6, r4
 f5c:	1afffff9 	bne	f48 <__libc_init_array+0x58>
 f60:	e8bd4070 	pop	{r4, r5, r6, lr}
 f64:	e12fff1e 	bx	lr
 f68:	00000fe0 	.word	0x00000fe0
 f6c:	00000fe0 	.word	0x00000fe0
 f70:	00000fe0 	.word	0x00000fe0
 f74:	00000fe8 	.word	0x00000fe8

Disassembly of section .rodata:

00000f7c <_global_impure_ptr-0x44>:
     f7c:	726f6353 	.word	0x726f6353
     f80:	00003a65 	.word	0x00003a65
     f84:	00000030 	.word	0x00000030
     f88:	00000031 	.word	0x00000031
     f8c:	00000032 	.word	0x00000032
     f90:	00000033 	.word	0x00000033
     f94:	00000034 	.word	0x00000034
     f98:	00000035 	.word	0x00000035
     f9c:	00002b35 	.word	0x00002b35
     fa0:	454d4147 	.word	0x454d4147
     fa4:	45564f20 	.word	0x45564f20
     fa8:	00000052 	.word	0x00000052
     fac:	73657250 	.word	0x73657250
     fb0:	454b2073 	.word	0x454b2073
     fb4:	72203159 	.word	0x72203159
     fb8:	61747365 	.word	0x61747365
     fbc:	00007472 	.word	0x00007472

00000fc0 <_global_impure_ptr>:
     fc0:	00001028 00000043                       (...C...

00000fc8 <_init>:
     fc8:	e1a0c00d 	mov	r12, sp
     fcc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
     fd0:	e24cb004 	sub	r11, r12, #4
     fd4:	e24bd028 	sub	sp, r11, #40	; 0x28
     fd8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
     fdc:	e12fff1e 	bx	lr

00000fe0 <__init_array_start>:
     fe0:	00000e08 	.word	0x00000e08

00000fe4 <__frame_dummy_init_array_entry>:
     fe4:	00000208                                ....

00000fe8 <__libc_fini>:
     fe8:	e1a0c00d 	mov	r12, sp
     fec:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
     ff0:	e24cb004 	sub	r11, r12, #4
     ff4:	e24bd028 	sub	sp, r11, #40	; 0x28
     ff8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
     ffc:	e12fff1e 	bx	lr

00001000 <__fini_array_start>:
    1000:	000001c4 	.word	0x000001c4

00001004 <__cs3_regions>:
	...
    1010:	00001458 	.word	0x00001458
    1014:	00000048 	.word	0x00000048
